---
# List of plays
-
  # Hosts: where our play will run and options it will run with
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: always

  # Vars: variables that will apply to the play, on all targets 

  # Tasks: the list of tasks that will be executed within 
  #        the play, this section can also be used for 
  #        pre and post tasks
  tasks:
    # from https://superuser.com/questions/1395954/ansible-playbook-to-determine-os-release
  - name: System details
    debug: msg="{{ item }}"
    with_items: 
    - "{{ ansible_distribution }}"
    - "{{ ansible_distribution_version }}"
    - "{{ ansible_distribution_major_version }}"
    # Detect if we are running on a WSL2 environment
  - name: Set wsl2_environment fact default to false
    set_fact:
      wsl2_environment: false
  - name: Set wsl2_environment fact True
    set_fact:
      wsl2_environment: true
    when: ansible_kernel is search("microsoft-standard-WSL2")  
  # fix for .gnupg/ permissions when building custom images
  - name: Add fix for .gnupg/ permissions
    lineinfile:
      path: "/etc/bash.bashrc"
      line: "chmod 700 ~/.gnupg/"    
  - name: Add custom prompt to /etc/skel/.profile
    lineinfile:
      path: "/etc/skel/.profile"
      line: 'export PS1="\[\033[00;32m\][\w]\$\[\033[00m\] "'

  # Handlers: the list of handlers that are executed as a notify 
  #           key from a task

  # Roles: list of roles to be imported into the play
  roles:
  - role: irixjp.role_example_hello

# Add additional plays here (remember the list entry -)
# Be sure to use the same hosts and connection entries above
# addtional plays

-
  # Install build-essential
  hosts: localhost
  connection: local
  tags:
  - install_doxygen
  - install_cross_compile_toolchain

  tasks:
  - name: Install build-essential
    apt:
      name: build-essential
      update_cache: yes

-
  # install OpenJDK 11
  hosts: localhost
  connection: local
  tasks:
  - name: Download OpenJDK 11 tarball
    shell: wget https://download.java.net/openjdk/jdk11/ri/openjdk-11+28_linux-x64_bin.tar.gz -O /home/kasm-default-profile/openjdk-11+28_linux-x64_bin.tar.gz
  - name: Extract OpenJDK 11 binaries
    unarchive:
      src: /home/kasm-default-profile/openjdk-11+28_linux-x64_bin.tar.gz
      dest: /opt
      remote_src: yes
      creates: /opt/jdk-11/release
  - name: Delete OpenJDK 11 tarball
    shell: rm /home/kasm-default-profile/openjdk-11+28_linux-x64_bin.tar.gz
  - name: Update alternatives so the command, java, points to installed jdk
    shell: update-alternatives --install /usr/bin/java java /opt/jdk-11/bin/java 100
  - name: Update alternatives so the command, javac, points to installed jdk
    shell: update-alternatives --install /usr/bin/javac javac /opt/jdk-11/bin/javac 100

-
  # install chrome
  hosts: localhost
  connection: local
  gather_facts: yes

  roles:
    - role: webarchitect609.google_chrome

-
  # install keychain, git, and @capsulecorplab .vimrc and .gitconfig
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_utilities

  vars:
    git_version: "2.42.0"
    git_version_to_install: "1:{{ git_version }}-0ppa1~ubuntu22.04.1"
    keychain_version: "2.8.5"
    keychain_version_to_install: "{{ keychain_version }}-2"
    keychain_version_expected: "{{ keychain_version }}.."

  tasks:
  - name: Add git PPA
    shell: add-apt-repository ppa:git-core/ppa
  - name: Install git
    apt:
      name: "git={{ git_version_to_install }}"
  - name: Install Git Bash Completion
    apt:
      name: bash-completion
      update_cache: yes
  - name: Install Keychain
    apt:
      name: "keychain={{ keychain_version_to_install }}"
      update_cache: yes
  - name: install ping
    apt:
      name: iputils-ping
      update_cache: yes
  - name: Get git version
    shell: git version | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_git_version
  - name: Get keychain version
    shell:
      cmd: keychain -V 2> >(grep -i keychain) 2> >(sed 's/[[:alpha:]|(|[:space:]]//g') | fgrep '*' | sed 's/[*~://]//g'
      executable: /bin/bash
    register: installed_keychain_version
  - name: Display git and keychain versions
    debug:
      msg: "git = {{ installed_git_version.stdout }} | keychain = {{ installed_keychain_version.stdout }}"
  - name: Test git version
    fail:
      msg: "Git Version Error: Expected {{ git_version }} | Found {{ installed_git_version.stdout }}"
    when: installed_git_version.stdout != git_version
  - name: Test keychain version
    fail:
      msg: "Keychain Version Error: Expected {{ keychain_version_expected }} | Found {{ installed_keychain_version.stdout }}"
    when: installed_keychain_version.stdout != keychain_version_expected
  - name: auto-launch keychain in shell, if ssh keys exists
    shell: echo 'if [ -r ~/.ssh/id_ed25519 ]; then\n    eval `keychain --eval id_ed25519`\nfi' >> /home/kasm-default-profile/.bashrc
  - name: Install @capsulecorplab .vimrc
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/495058e7a57ed8adaed3c40c80d09739/raw/4a6e6f6ff92b96919be111c9cbb5a4a21ab472d2/.vimrc
      dest: /home/kasm-default-profile/
  - name: Install @capsulecorplab .gitconfig
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/401ba2fe0857a328f2a626adbf078cc6/raw/b89a6234f0d620ff60bcfe37f95de197b8772377/.gitconfig
      dest: /home/kasm-default-profile/

-
  # install Cross-compile toolchain for embedded Linux target
  hosts: localhost
  connection: local
  tags:
  - install_cross_compile_toolchain
  - install_doxygen

  tasks:
  - name: Install gcc-arm-linux-gnueabihf with Apt
    apt:
      name: gcc-arm-linux-gnueabihf
      update_cache: yes
  - name: Install g++-arm-linux-gnueabihf with Apt
    apt:
      name: g++-arm-linux-gnueabihf
      update_cache: yes
  - name: Install gdb-multiarch with Apt
    apt:
      name: gdb-multiarch
      update_cache: yes
  - name: Install libssl-dev
    apt:
      name: libssl-dev
      update_cache: yes
  - name: Download cmake tarball
    shell: wget http://www.cmake.org/files/v3.23/cmake-3.23.1.tar.gz -O /home/kasm-default-profile/cmake-3.23.1.tar.gz
  - name: Extract cmake source files
    unarchive:
      src: /home/kasm-default-profile/cmake-3.23.1.tar.gz
      dest: /home/kasm-default-profile/
      remote_src: yes
      creates: /home/kasm-default-profile/cmake-3.23.1/README
  - name: Delete cmake tarball
    shell: rm /home/kasm-default-profile/cmake-3.23.1.tar.gz
  - name: Build cmake
    shell:
      cmd: ./configure && make > /tmp/cmake_build_output.txt 2>&1 && make install
      chdir: /home/kasm-default-profile/cmake-3.23.1/
      executable: /bin/bash
  - name: Delete cmake source files
    shell: rm -rf /home/kasm-default-profile/cmake-3.23.1/

-
  # install Python packages with pip
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
    - install_arduino_tools

  vars:
    fprime_version: "v3.3.2"
    arduino_cli_cmake_wrapper_version: "94c3145e5ea4a0a48dc3f70560dfb8a"
    fprime_led_blinker_version: "5a0031db1d87a87e6ec343827cc5956d54b76509"
    fprime_math_component_version: "v3.3.2"

  tasks:
  - name: Update OS to point python to python3
    apt:
      name: python-is-python3
      update_cache: yes
  - name: Install pip for python3 with Apt
    apt:
      name: python3-pip
      update_cache: yes
  - name: Install python packages with pip
    pip:
      name:
        - jupyterlab
        - notebook
        - voila
        - pint
        - setuptools
        - git+https://github.com/SterlingPeet/arduino-cli-cmake-wrapper.git@{{ arduino_cli_cmake_wrapper_version }}#egg=arduino-cli-cmake-wrapper
        - pyserial
  - name: Install fprime python packages & dependencies
    pip:
      requirements: https://raw.githubusercontent.com/nasa/fprime/{{ fprime_version }}/requirements.txt
  - name: Clone fprime led blinker repo
    shell:
      cmd: git clone --recursive https://github.com/fprime-community/fprime-workshop-led-blinker.git
      chdir: /home/kasm-default-profile/
      executable: /bin/bash
  - name: Checkout {{ fprime_led_blinker_version }} in fprime led blinker repo
    shell:
      cmd: git checkout {{ fprime_led_blinker_version }}
      chdir: /home/kasm-default-profile/fprime-workshop-led-blinker
      executable: /bin/bash
  - name: Fetch fprime submodule
    shell:
      cmd: git fetch
      chdir: /home/kasm-default-profile/fprime-workshop-led-blinker/fprime
      executable: /bin/bash
  - name: Checkout {{ fprime_version }} in fprime submodule
    shell:
      cmd: git checkout {{ fprime_version }}
      chdir: /home/kasm-default-profile/fprime-workshop-led-blinker/fprime
      executable: /bin/bash
  - name: Generate fprime led blinker unit tests
    shell:
      cmd: fprime-util generate --ut
      chdir: /home/kasm-default-profile/fprime-workshop-led-blinker
      executable: /bin/bash
  - name: Build and run fprime led blinker unit tests
    shell:
      cmd: fprime-util check -v -rerun-failed --output-on-failure 1> /tmp/fprime_workshop_led_blinker_build_output.txt
      chdir: /home/kasm-default-profile/fprime-workshop-led-blinker
      executable: /bin/bash
  - name: Delete fprime led blinker repo
    shell: rm -rf /home/kasm-default-profile/fprime-workshop-led-blinker
  - name: Clone fprime math component repo
    shell:
      cmd: git clone --recursive https://github.com/fprime-community/fprime-tutorial-math-component.git
      chdir: /home/kasm-default-profile/
      executable: /bin/bash
  - name: Checkout {{ fprime_math_component_version }} in fprime math component repo
    shell:
      cmd: git checkout {{ fprime_math_component_version }}
      chdir: /home/kasm-default-profile/fprime-tutorial-math-component
      executable: /bin/bash
  - name: Fetch fprime submodule
    shell:
      cmd: git fetch
      chdir: /home/kasm-default-profile/fprime-tutorial-math-component/fprime
      executable: /bin/bash
  - name: Checkout {{ fprime_version }} in fprime submodule
    shell:
      cmd: git checkout {{ fprime_version }}
      chdir: /home/kasm-default-profile/fprime-tutorial-math-component/fprime
      executable: /bin/bash
  - name: Generate fprime math component unit tests
    shell:
      cmd: fprime-util generate --ut
      chdir: /home/kasm-default-profile/fprime-tutorial-math-component
      executable: /bin/bash
  - name: Build and run fprime math component unit tests
    shell:
      cmd: fprime-util check -v -rerun-failed --output-on-failure 1> /tmp/fprime_math_component_build_output.txt
      chdir: /home/kasm-default-profile/fprime-tutorial-math-component
      executable: /bin/bash
  - name: Delete fprime math component repo
    shell: rm -rf /home/kasm-default-profile/fprime-tutorial-math-component

-
  # install arduino-cli
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
    - install_arduino_tools

  vars:
    arduino_version: "1.8.19"
    arduino_cli_version: "0.33.1"
    arduino_pico_version: "3.3.0"
    arduino_esp32_version: "2.0.9"
    adafruit_samd_version: "1.7.13"
    fprime_arduino_led_blinker_version: "8d9ad820c0caeb66c4472801ed9f76b1d622694e"

  tasks:
  - name: Download Arduino CLI tarball
    get_url:
      url: https://github.com/arduino/arduino-cli/releases/download/{{ arduino_cli_version }}/arduino-cli_{{ arduino_cli_version }}_Linux_64bit.tar.gz
      dest: /home/kasm-default-profile
  - name: Create directory for Arduino CLI tarball
    shell: mkdir -p /home/kasm-default-profile/arduino-cli_{{ arduino_cli_version }}
  - name: unarchive Arduino CLI tarball
    unarchive:
      src: /home/kasm-default-profile/arduino-cli_{{ arduino_cli_version }}_Linux_64bit.tar.gz
      dest: /home/kasm-default-profile/arduino-cli_{{ arduino_cli_version }}
      remote_src: yes
      creates: /home/kasm-default-profile/arduino-cli_{{ arduino_cli_version }}/License.txt
  - name: Delete Arduino CLI tarball
    shell: rm /home/kasm-default-profile/arduino-cli_{{ arduino_cli_version }}_Linux_64bit.tar.gz
  - name: install Arduino CLI to /usr/local/bin
    shell: mv /home/kasm-default-profile/arduino-cli_{{ arduino_cli_version }}/arduino-cli /usr/local/bin
  - name: Delete Arduino CLI directory
    shell: rm -rf /home/kasm-default-profile/arduino-cli_{{ arduino_cli_version }}
  - name: Get Arduino CLI version
    shell: arduino-cli version | sed 's/arduino-cli/\n/g' | sed 's/Commit:/\n/g' | grep Version | sed 's/[[:alpha:]|[:space:]]//g' | sed 's/://g'
    register: installed_arduino_cli_version
  - name: Display Arduino CLI version
    debug:
      msg: "Arduino CLI version = {{ installed_arduino_cli_version.stdout }}"
  - name: Test Arduino CLI version
    fail:
      msg: "Arduino CLI Version Error: Expected {{ arduino_cli_version }} | Found {{ installed_arduino_cli_version.stdout }}"
    when: installed_arduino_cli_version.stdout != arduino_cli_version
  - name: Initialize arduino workspace directory using arduino-cli
    shell: arduino-cli config init
  - name: Add URL for Arduino-Pico package index to Board Manager using arduino-cli
    shell: arduino-cli config add board_manager.additional_urls https://github.com/earlephilhower/arduino-pico/releases/download/{{ arduino_pico_version }}/package_rp2040_index.json
  - name: Add URL for Arduino-ESP32 package index to Board Manager using arduino-cli
    shell: arduino-cli config add board_manager.additional_urls https://github.com/espressif/arduino-esp32/releases/download/{{ arduino_esp32_version }}/package_esp32_index.json
  - name: Add URL for Adafruit package index to Board Manager using arduino-cli
    shell: arduino-cli config add board_manager.additional_urls https://raw.githubusercontent.com/adafruit/arduino-board-index/8a67f577257b5f3e958ce32f18b55a8491f6d06f/package_adafruit_index.json
  - name: Add URL for Teensy package index to Board Manager using arduino-cli
    shell: arduino-cli config add board_manager.additional_urls https://www.pjrc.com/teensy/package_teensy_index.json
  - name: Update index using arduino-cli
    shell: arduino-cli core update-index
  - name: Install package index for Arduino-Pico using arduino-cli
    shell: arduino-cli core install rp2040:rp2040@{{ arduino_pico_version }}
  - name: Install package index for Arduino-ESP32 using arduino-cli
    shell: arduino-cli core install esp32:esp32@{{ arduino_esp32_version }}
  - name: Install package index for Adafruit-SAMD using arduino-cli
    shell: arduino-cli core install adafruit:samd@{{ adafruit_samd_version }}
  - name: Install package index for Teensy using arduino-cli
    shell: arduino-cli core install teensy:avr
  - name: Get Arduino-Pico version
    shell: arduino-cli core list | grep rp2040 | awk '{ print $2'}
    register: installed_arduino_pico_version
  - name: Get Arduino-ESP32 version
    shell: arduino-cli core list | grep esp32 | awk '{ print $2'}
    register: installed_arduino_esp32_version
  - name: Get Adafruit-SAMD version
    shell: arduino-cli core list | grep adafruit | awk '{ print $2'}
    register: installed_adafruit_samd_version
  - name: Display Arduino-Pico version
    debug:
      msg: "Arduino-Pico version = {{ installed_arduino_pico_version.stdout }}"
  - name: Display Arduino-ESP32 version
    debug:
      msg: "Arduino-ESP32 version = {{ installed_arduino_esp32_version.stdout }}"
  - name: Display Adafruit board index version
    debug:
      msg: "Adafruit-SAMD version = {{ installed_adafruit_samd_version.stdout }}"
  - name: Test Arduino-Pico version
    fail:
      msg: "Arduino-Pico Version Error: Expected {{ arduino_pico_version }} | Found {{ installed_arduino_pico_version.stdout }}"
    when: installed_arduino_pico_version.stdout != arduino_pico_version
  - name: Test Arduino-ESP32 version
    fail:
      msg: "Arduino-ESP32 Version Error: Expected {{ arduino_esp32_version }} | Found {{ installed_arduino_esp32_version.stdout }}"
    when: installed_arduino_esp32_version.stdout != arduino_esp32_version
  - name: Test Adafruit board index version
    fail:
      msg: "Adafruit-SAMD Version Error: Expected {{ adafruit_samd_version }} | Found {{ installed_adafruit_samd_version.stdout }}"
    when: installed_adafruit_samd_version.stdout != adafruit_samd_version
  - name: Download Teensy rules to /etc/udev/rules.d
    get_url:
      url: https://raw.githubusercontent.com/fprime-community/fprime-arduino-led-blinker/{{ fprime_arduino_led_blinker_version }}/docs/rules/00-teensy.rules
      dest: /etc/udev/rules.d
  - name: Download Adafruit boards rules to /etc/udev/rules.d
    get_url:
      url: https://raw.githubusercontent.com/fprime-community/fprime-arduino-led-blinker/{{ fprime_arduino_led_blinker_version }}/docs/rules/99-adafruit-boards.rules
      dest: /etc/udev/rules.d

-
  # add default user to dialout group
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
    - install_arduino_tools

  tasks:
  - name: Add kasm-user to dialout group (for fixing Permission Denied on /dev/ttyACM0 issue) # see https://www.shellhacks.com/arduino-dev-ttyacm0-permission-denied/
    user:
      name: kasm-user
      shell: /bin/bash
      groups: "dialout"
      state: present
      remove: yes

-
  # install Doctools
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_doxygen

  vars:
    doxygen_version: "1.9.6"

  tasks:
  - name: Install doxygen dependencies # as per https://stackoverflow.com/questions/50986047/doxygen-could-not-find-flex-missing-flex-executable
    apt:
      name: flex, bison
      update_cache: yes
  - name: Download Doxygen tarball
    shell:
      cmd: wget https://github.com/doxygen/doxygen/releases/download/Release_{{ doxygen_version | replace(".","_") }}/doxygen-{{ doxygen_version }}.src.tar.gz -O /home/kasm-default-profile/doxygen-{{ doxygen_version }}.src.tar.gz
  - name: Extract Doxygen tarball
    unarchive:
      src: /home/kasm-default-profile/doxygen-{{ doxygen_version }}.src.tar.gz
      dest: /opt
      remote_src: yes
      creates: /opt/doxygen-{{ doxygen_version }}/README.md
  - name: Create Doxygen build directory
    shell:
      cmd: mkdir -p /opt/doxygen-{{ doxygen_version }}/build
  - name: Delete Doxygen tarball
    shell:
      cmd: rm /home/kasm-default-profile/doxygen-{{ doxygen_version }}.src.tar.gz
  - name: Build Doxygen
    shell:
      cmd: cmake -G "Unix Makefiles" .. && make > /tmp/doxygen_build_output.txt 2>&1 && make install
      chdir: /opt/doxygen-{{ doxygen_version }}/build
      executable: /bin/bash

- 
  # install sudo for the vs-code role below 
  hosts: localhost
  connection: local
  tasks:
  - name: Install Sudo
    apt:
      name: sudo
      update_cache: yes
  - name: Preserve DONT_PROMPT_WSL_INSTALL in sudoers
    lineinfile:
      path: "/etc/sudoers"
      line: "Defaults        env_keep += \"DONT_PROMPT_WSL_INSTALL\""
    when: wsl2_environment

-
# add dev user to give vs code somewhere to install extensions
  hosts: localhost
  connection: local
  tasks:
  - name: Add dev user
    user:
      name: dev
      uid: 1001

-
  # install the remainder of the tools
  hosts: localhost
  connection: local
  environment: 
    DONT_PROMPT_WSL_INSTALL: 1
  roles:
    - role: gantsign.visual-studio-code
      users:
        - username: "dev"
          visual_studio_code_extensions:
            - ms-python.python
            - jet-propulsion-laboratory.fpp
          visual_studio_code_settings_overwrite: yes
          visual_studio_code_settings: {
            "extensions.ignoreRecommendations": true,
            "update.mode": "none",
            "extensions.autoUpdate": false,
            "extensions.autoCheckUpdates": false,
            "terminal.integrated.profiles.linux": {
              "bash (login)": {
                "path": "bash",
                "args": ["-l"]
                }
              },
            "terminal.integrated.defaultProfile.linux": "bash (login)" 
          }  

-
  # Copy VS Code changes to kasm-default-profile and lean up (remove) dev user now that vs code is installed
  hosts: localhost
  connection: local
  tasks:
  - name: Copy VS Code changes to kasm-default-profile
    shell: 
      cmd: cp -r /home/dev/.config/Code/ /home/kasm-default-profile/.config/Code/ && cp -r /home/dev/.vscode/ /home/kasm-default-profile/.vscode/
  - name: Remove dev user
    user:
      name: dev
      state: absent
      remove: yes 

# Three dots indicate the end of a YAML document
...
